@page "/data"
@using System.Text;
@using System.Runtime.Intrinsics.Arm;
@using System.Security.Cryptography;
@using System;
@using System.IO;



<h3>Data Encryption/Decryption Tool</h3>

<div class="container">
    <div>
        <label for="inputText">Enter Text:</label>
        <input id="inputText" @bind="inputText" placeholder="Type your text here" />
    </div>

    <div class="d-flex justify-content-between">
        <button @onclick="Encrypt" class="btn btn-encrypt">Encrypt</button>
        <button @onclick="Decrypt" class="btn btn-decrypt">Decrypt</button>
    </div>

    <div>
        <p>Encrypted Text: @encryptedText</p>
        <p>Decrypted Text: @decryptedText</p>
    </div>
</div>


<br />
<br />

<br />
<br />

<br />
<br />

<br />
<br />


<br />
<br />

<br />
<br />

<br />
<br />


@code {
    private string inputText;
    private string encryptedText;
    private string decryptedText;

    private void Encrypt()
    {
        // Perform encryption using a secure algorithm (e.g., AES)
        byte[] encryptedBytes = EncryptStringToBytes_Aes(inputText, "YourSecretKey");
        encryptedText = Convert.ToBase64String(encryptedBytes);
    }

    private void Decrypt()
    {
        // Perform decryption using the same secure algorithm (e.g., AES)
        byte[] encryptedBytes = Convert.FromBase64String(encryptedText);
        decryptedText = DecryptStringFromBytes_Aes(encryptedBytes, "YourSecretKey");
    }

    private static byte[] EncryptStringToBytes_Aes(string plainText, string key)
    {
        string keyString = key;
        int keySize = 32; // for a 256-bit key

        // If the key is too short, pad it with some character
        if (keyString.Length < keySize)
        {
            keyString = keyString.PadRight(keySize, '0');
        }
        // If the key is too long, truncate it
        else if (keyString.Length > keySize)
        {
            keyString = keyString.Substring(0, keySize);
        }

        byte[] keyBytes = Encoding.UTF8.GetBytes(keyString);

        using (System.Security.Cryptography.Aes aesAlg = System.Security.Cryptography.Aes.Create())
        {
            aesAlg.Key = keyBytes;
            aesAlg.IV = new byte[aesAlg.BlockSize / 8];

            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                }
                return msEncrypt.ToArray();
            }
        }
    }

    private static string DecryptStringFromBytes_Aes(byte[] cipherText, string key)
    {
        string keyString = key;
        int keySize = 32; // for a 256-bit key

        // If the key is too short, pad it with some character
        if (keyString.Length < keySize)
        {
            keyString = keyString.PadRight(keySize, '0');
        }
        // If the key is too long, truncate it
        else if (keyString.Length > keySize)
        {
            keyString = keyString.Substring(0, keySize);
        }

        byte[] keyBytes = Encoding.UTF8.GetBytes(keyString);

        using (System.Security.Cryptography.Aes aesAlg = System.Security.Cryptography.Aes.Create())
        {
            aesAlg.Key = keyBytes;
            aesAlg.IV = new byte[aesAlg.BlockSize / 8];

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        return srDecrypt.ReadToEnd();
                    }
                }
            }
        }
    }
}
